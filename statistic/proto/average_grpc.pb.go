// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: average.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatisticProcessorClient is the client API for StatisticProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticProcessorClient interface {
	CalculateAverage(ctx context.Context, opts ...grpc.CallOption) (StatisticProcessor_CalculateAverageClient, error)
}

type statisticProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticProcessorClient(cc grpc.ClientConnInterface) StatisticProcessorClient {
	return &statisticProcessorClient{cc}
}

func (c *statisticProcessorClient) CalculateAverage(ctx context.Context, opts ...grpc.CallOption) (StatisticProcessor_CalculateAverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &StatisticProcessor_ServiceDesc.Streams[0], "/statistic.StatisticProcessor/CalculateAverage", opts...)
	if err != nil {
		return nil, err
	}
	x := &statisticProcessorCalculateAverageClient{stream}
	return x, nil
}

type StatisticProcessor_CalculateAverageClient interface {
	Send(*CalculationItem) error
	CloseAndRecv() (*AverageResponse, error)
	grpc.ClientStream
}

type statisticProcessorCalculateAverageClient struct {
	grpc.ClientStream
}

func (x *statisticProcessorCalculateAverageClient) Send(m *CalculationItem) error {
	return x.ClientStream.SendMsg(m)
}

func (x *statisticProcessorCalculateAverageClient) CloseAndRecv() (*AverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatisticProcessorServer is the server API for StatisticProcessor service.
// All implementations must embed UnimplementedStatisticProcessorServer
// for forward compatibility
type StatisticProcessorServer interface {
	CalculateAverage(StatisticProcessor_CalculateAverageServer) error
	mustEmbedUnimplementedStatisticProcessorServer()
}

// UnimplementedStatisticProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedStatisticProcessorServer struct {
}

func (UnimplementedStatisticProcessorServer) CalculateAverage(StatisticProcessor_CalculateAverageServer) error {
	return status.Errorf(codes.Unimplemented, "method CalculateAverage not implemented")
}
func (UnimplementedStatisticProcessorServer) mustEmbedUnimplementedStatisticProcessorServer() {}

// UnsafeStatisticProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticProcessorServer will
// result in compilation errors.
type UnsafeStatisticProcessorServer interface {
	mustEmbedUnimplementedStatisticProcessorServer()
}

func RegisterStatisticProcessorServer(s grpc.ServiceRegistrar, srv StatisticProcessorServer) {
	s.RegisterService(&StatisticProcessor_ServiceDesc, srv)
}

func _StatisticProcessor_CalculateAverage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StatisticProcessorServer).CalculateAverage(&statisticProcessorCalculateAverageServer{stream})
}

type StatisticProcessor_CalculateAverageServer interface {
	SendAndClose(*AverageResponse) error
	Recv() (*CalculationItem, error)
	grpc.ServerStream
}

type statisticProcessorCalculateAverageServer struct {
	grpc.ServerStream
}

func (x *statisticProcessorCalculateAverageServer) SendAndClose(m *AverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *statisticProcessorCalculateAverageServer) Recv() (*CalculationItem, error) {
	m := new(CalculationItem)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatisticProcessor_ServiceDesc is the grpc.ServiceDesc for StatisticProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatisticProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statistic.StatisticProcessor",
	HandlerType: (*StatisticProcessorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CalculateAverage",
			Handler:       _StatisticProcessor_CalculateAverage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "average.proto",
}
